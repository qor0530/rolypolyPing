using UnityEngine;
using UnityEngine.UI; // UI ???? ??????????
using UnityEngine.SceneManagement; // ?? ????? ???? ??????????
using TMPro; // TextMeshPro ???? ?????????? ???
using UnityEditor;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using TMPro;
using System.Collections.Generic;
using System.Collections;
using System.IO; // ???? ??? ???? ??? ???
using UnityEngine.Networking; // UnityWebRequest?? ???????? ???


public class GameManager : MonoBehaviour
{
    public Button completeGameButton; // ???? ??? ???
    public Image scoreImage; // ?????? ???? ????? ???
    private List<float> scores = new List<float>(); // 3?? ???????? ?????? ???? ?????

    // ?? ???? ?????? ?????? ??????? ???? ????
    public int excellentCount = 0;
    public int greatCount = 0;
    public int goodCount = 0;
    public int badCount = 0;
    public int missCount = 0;

    public float totalScore = 0f; // ??? ?????? ??
    public int totalScoreCount = 0; // ??? ???? ????
    public float averageScore = 0f; // 1.5?? ?????? ??? ????

    public string starScore = ""; //Result?? ????? ???
    public AudioSource audioSource;

    void Start()
    {
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }
        string basePath = Path.Combine(Application.dataPath, "../../../../../Fiction-Royals-Merge/Fiction-Royals/db");
        LoadSelectedMusic();

        PlayerPrefs.Save();
        // PlayerPrefs?? ????? ???? ?? ????? ?????? ?ес?? ???
        PrintAllPlayerPrefs();


        // ???? ??? ??? ??? ???? ????
        completeGameButton.onClick.AddListener(CompleteGame);

        // ?????? ??йг? ???????
        HideScoreImage();
        StartCoroutine(UpdateScore());
        starScore = GetStarGrade(excellentCount, greatCount, goodCount, badCount, missCount);
    }

    void LoadSelectedMusic()
    {
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }

        if (PlayerPrefs.HasKey("SelectedMusicPath"))
        {
            string selectedMusicPath = PlayerPrefs.GetString("SelectedMusicPath");
            StartCoroutine(LoadAudio(selectedMusicPath));
        }
        else
        {
            Debug.LogWarning("????? ???? ??еш? ??? ?? ???????.");
        }
    }

    private IEnumerator LoadAudio(string filePath)
    {
        using (UnityWebRequest uwr = UnityWebRequestMultimedia.GetAudioClip("file://" + filePath, AudioType.MPEG))
        {
            yield return uwr.SendWebRequest();

            if (uwr.result == UnityWebRequest.Result.Success)
            {
                audioSource.clip = DownloadHandlerAudioClip.GetContent(uwr);
                audioSource.Play();
                Debug.Log("????? ???? ??? ??: " + filePath);
            }
            else
            {
                Debug.LogError("????? ???? ?ех? ????: " + filePath);
            }
        }
    }


    void ShowScoreImage()
    {
        Color color = scoreImage.color;
        color.a = 1; // ??????? 1?? ???? (???? ??????)
        scoreImage.color = color;
    }

    void HideScoreImage()
    {
        Color color = scoreImage.color;
        color.a = 0; // ??????? 0???? ???? (???? ????)
        scoreImage.color = color;
    }

    IEnumerator UpdateScore()
    {
        while (true)
        {
            // scores.Clear(); // ???ея? 3?? ?????? ???? ????? ????

            // UDPReceiver???? ??? ???? ????????
            if (UDPReceiver.Instance != null && UDPReceiver.Instance.LatestCoord3Ds.Count != 0)
            {
                float latestScore = UDPReceiver.Instance.LatestScores[1];
                // ?????? ??????? ??????? ??? ??? ????
                totalScore += latestScore;
                totalScoreCount++;

                scores.Add(latestScore);
                // totalScore += latestScore;

                // ?????? ???? ?????? ?????? ???
                string scoreGrade = GetScoreGrade(latestScore);
                UpdateScoreImage(scoreGrade);
            }

            // 3?? ?????? ??? ???? ???
            if (totalScoreCount > 0)
            {
                averageScore = totalScore / totalScoreCount;
            }

            // ???? ?????? ???? ????
            CountScoreGrades();

            // 3?? ???????? ??? ?????? ?? ?????? ?????? ???
            Debug.Log($"Average Score (3s): {averageScore:F2}, Excellent: {excellentCount}, Great: {greatCount}, Good: {goodCount}, Bad: {badCount}, Miss: {missCount}");

            yield return new WaitForSeconds(1.5f); // 1.5?? ???????? ???????
        }
    }

    // ?????? ???? ??????? ??????? ???
    void UpdateScoreImage(string scoreGrade)
    {

        string imagePath = $"Images/{scoreGrade.ToLower()}"; // ????? ??? ???? (Resources ???? ?? ???)
        Sprite newSprite = Resources.Load<Sprite>(imagePath);

        if (newSprite != null)
        {
            scoreImage.sprite = newSprite; // ????? ????
            ShowScoreImage(); // ????? ?????
        }
        else
        {
            Debug.LogWarning($"??????? ?ех??? ?? ???????: {imagePath}");
            HideScoreImage(); // ????? ?????
        }
    }
    // ?????? ???????? ??????? ???
    string GetScoreGrade(float score)
    {
        if (score >= 91)
        {
            excellentCount++;
            return "Excellent";
        }
        else if (score >= 76)
        {
            greatCount++;
            return "Great";
        }
        else if (score >= 61)
        {
            goodCount++;
            return "Good";
        }
        else if (score >= 51)
        {
            badCount++;
            return "Bad";
        }
        else
        {
            missCount++;
            return "Miss";
        }
    }

    string GetStarGrade(int excellentCount, int greatCount, int goodCount, int badCount, int missCount)
    {
        // ?? ?? ???? ???? ??
        if (missCount >= 2)
            return "F"; // Miss? 2? ???? "F"
        if (missCount > 0)
            return "C"; // Miss? 1?? "C"
        if (badCount > 0)
            return "B"; // Bad? 1? ???? "B"
        if (goodCount > 0)
            return "A"; // Good? 1? ???? "A"
        if (greatCount > 0)
            return "S"; // Great? 1? ???? "S"
        return "SS";
    }


    void CountScoreGrades()
    {
        excellentCount = 0;
        greatCount = 0;
        goodCount = 0;
        badCount = 0;
        missCount = 0;

        foreach (float score in scores)
        {
            GetScoreGrade(score);
        }
    }

    // PlayerPrefs?? ????? ??? ?????? ?????? ??? (??? ????)
    void PrintAllPlayerPrefs()
    {
        // ????? GameMode ???????
        if (PlayerPrefs.HasKey("GameMode"))
        {
            int gameMode = PlayerPrefs.GetInt("GameMode");

            if (gameMode == 1)
            {
                Debug.Log("????б└??? ???? ????");
            }
            else if (gameMode == 2)
            {
                Debug.Log("????б└??? ???? ????");
            }
            else
            {
                Debug.Log("????? gameMode????.");
            }
        }
        else
        {
            Debug.Log("GameMode?? ??? ?? ???????.");
        }


        // ????? ???? ???? ???
        if (PlayerPrefs.HasKey("SelectedCameraIndex"))
        {
            int selectedCameraIndex = PlayerPrefs.GetInt("SelectedCameraIndex");
            Debug.Log("SelectedCameraIndex: " + selectedCameraIndex);
        }
        else
        {
            Debug.Log("???? ?????? ??? ?? ???????.");
        }

        // ????? ????? ???? ???
        if (PlayerPrefs.HasKey("SelectedMusicIndex"))
        {
            int selectedThumbnailIndex = PlayerPrefs.GetInt("SelectedMusicIndex");
            Debug.Log("SelectedMusicIndex: " + selectedThumbnailIndex);
        }
        else
        {
            Debug.Log("???? ?????? ??? ?? ???????.");
        }

        Debug.Log("PlayerPrefs ????? ??? ?????? ?????????.");
    }
    // ???? ??? ?? ResultScene???? ?????? ???
    public void CompleteGame()
    {
        // ?????? ???? ????
        PlayerPrefs.SetString("StarScore", starScore);
        PlayerPrefs.SetInt("ExcellentCount", excellentCount);
        PlayerPrefs.SetInt("GreatCount", greatCount);
        PlayerPrefs.SetInt("GoodCount", goodCount);
        PlayerPrefs.SetInt("BadCount", badCount);
        PlayerPrefs.SetInt("MissCount", missCount);

        // ResultScene???? ???
        SceneManager.LoadScene("ResultScene");

        Debug.Log($"StarScore: {starScore}, Excellent: {excellentCount}, Great: {greatCount}, Good: {goodCount}, Bad: {badCount}, Miss: {missCount}");

    }
}